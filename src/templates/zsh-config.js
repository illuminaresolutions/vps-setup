export class ZshConfigGenerator {
  constructor() {
    this.defaultConfig = {
      promptStyle: 'detailed',
      plugins: ['autosuggestions', 'syntax-highlighting'],
      aliases: ['micro', 'bat', 'll'],
      historySize: 10000,
      ignoreDups: true
    };
  }

  generateConfig(customizations = {}, systemInfo = {}) {
    let config = '';

    // Add header comment
    config += this.generateHeader();

    // Add prompt configuration
    config += this.generatePrompt(customizations.promptStyle || 'detailed');

    // Add plugin configuration
    config += this.generatePluginConfig(customizations.plugins || []);

    // Add history configuration
    config += this.generateHistoryConfig(customizations);

    // Add completions
    config += this.generateCompletions();

    // Add key bindings
    config += this.generateKeyBindings();

    // Add aliases
    config += this.generateAliases(customizations.aliases || [], systemInfo);

    // Add environment variables
    config += this.generateEnvironmentVars();

    return config;
  }

  generateHeader() {
    return `# Custom zsh configuration
# Generated by VPS Setup Script
# ${new Date().toISOString()}

`;
  }

  generatePrompt(style) {
    const prompts = {
      simple: 'PROMPT=\'%n@%m:%~ $ \'',
      detailed: 'PROMPT=\'%F{cyan}%n%f@%F{green}%m%f:%F{yellow}%~%f $ \'',
      git: `PROMPT='%F{cyan}%n%f@%F{green}%m%f:%F{yellow}%~%f %F{red}(%b)%f $ '`,
      minimal: 'PROMPT=\'$ \''
    };

    const prompt = prompts[style] || prompts.detailed;
    return `${prompt}

`;
  }

  generatePluginConfig(plugins) {
    if (plugins.length === 0) {
      return '';
    }

    let config = '# Plugins\n';
    
    const pluginPaths = {
      'autosuggestions': '~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh',
      'syntax-highlighting': '~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh',
      'git': '~/.zsh/zsh-git/zsh-git.zsh',
      'history-substring-search': '~/.zsh/zsh-history-substring-search/zsh-history-substring-search.zsh'
    };

    for (const plugin of plugins) {
      const path = pluginPaths[plugin];
      if (path) {
        config += `source ${path}\n`;
      }
    }

    config += '\n';
    return config;
  }

  generateHistoryConfig(customizations) {
    const historySize = customizations.historySize || 10000;
    const ignoreDups = customizations.ignoreDups !== false;

    return `# History settings
HISTFILE=~/.zsh_history
HISTSIZE=${historySize}
SAVEHIST=${historySize}
setopt appendhistory
${ignoreDups ? 'setopt HIST_IGNORE_DUPS' : ''}

`;
  }

  generateCompletions() {
    return `# Basic completions
autoload -Uz compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

`;
  }

  generateKeyBindings() {
    return `# Key bindings
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

`;
  }

  generateAliases(aliases, systemInfo) {
    if (aliases.length === 0) {
      return '';
    }

    let config = '# Aliases\n';
    
    const aliasMap = {
      'micro': 'alias e="micro"',
      'bat': this.generateBatAlias(systemInfo),
      'll': 'alias ll="ls -la"',
      'cd': 'alias ..="cd .."',
      'git': 'alias g="git"',
      'docker': 'alias d="docker"',
      'ez': 'alias ez="micro ~/.zshrc"'
    };

    for (const alias of aliases) {
      const aliasConfig = aliasMap[alias];
      if (aliasConfig) {
        config += `${aliasConfig}\n`;
      }
    }

    config += '\n';
    return config;
  }

  generateBatAlias(systemInfo) {
    // Check if we're on Ubuntu (where bat is installed as batcat)
    if (systemInfo.distribution === 'ubuntu') {
      return 'alias bat="batcat"';
    } else {
      return 'alias bat="bat"';
    }
  }

  generateEnvironmentVars() {
    return `# Environment variables
export PATH="$HOME/bin:/usr/local/bin:$PATH"

# Editor
export EDITOR="micro"
export VISUAL="micro"

`;
  }

  generateGitPrompt() {
    return `
# Git prompt function
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats ' (%b)'
setopt PROMPT_SUBST
PROMPT='%F{cyan}%n%f@%F{green}%m%f:%F{yellow}%~%f%F{red}\${vcs_info_msg_0_}%f $ '
`;
  }

  generateAdvancedFeatures() {
    return `
# Advanced features
setopt AUTO_CD
setopt EXTENDED_GLOB
setopt NOTIFY

# Better directory navigation
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_MINUS

# Better job control
setopt AUTO_CONTINUE
setopt CHECK_JOBS
`;
  }

  validateConfig(customizations) {
    const errors = [];

    // Validate prompt style
    const validPromptStyles = ['simple', 'detailed', 'git', 'minimal'];
    if (customizations.promptStyle && !validPromptStyles.includes(customizations.promptStyle)) {
      errors.push(`Invalid prompt style: ${customizations.promptStyle}`);
    }

    // Validate plugins
    const validPlugins = ['autosuggestions', 'syntax-highlighting', 'git', 'history-substring-search'];
    if (customizations.plugins) {
      for (const plugin of customizations.plugins) {
        if (!validPlugins.includes(plugin)) {
          errors.push(`Invalid plugin: ${plugin}`);
        }
      }
    }

    // Validate aliases
    const validAliases = ['micro', 'bat', 'll', 'cd', 'git', 'docker'];
    if (customizations.aliases) {
      for (const alias of customizations.aliases) {
        if (!validAliases.includes(alias)) {
          errors.push(`Invalid alias: ${alias}`);
        }
      }
    }

    // Validate history size
    if (customizations.historySize && (customizations.historySize < 100 || customizations.historySize > 100000)) {
      errors.push('History size must be between 100 and 100000');
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  generateSampleConfig(systemInfo = {}) {
    return this.generateConfig({
      promptStyle: 'detailed',
      plugins: ['autosuggestions', 'syntax-highlighting'],
      aliases: ['micro', 'bat', 'll'],
      historySize: 10000,
      ignoreDups: true
    }, systemInfo);
  }

  mergeWithExisting(existingConfig, customizations, systemInfo) {
    // This would be used to merge with an existing .zshrc file
    // For now, we'll just generate a new config
    return this.generateConfig(customizations, systemInfo);
  }

  getAvailablePromptStyles() {
    return [
      { name: 'Simple (user@host:path $)', value: 'simple' },
      { name: 'Detailed with colors', value: 'detailed' },
      { name: 'Git-aware (shows branch)', value: 'git' },
      { name: 'Minimal (just $)', value: 'minimal' }
    ];
  }

  getAvailablePlugins() {
    return [
      { name: 'Autosuggestions (command suggestions)', value: 'autosuggestions' },
      { name: 'Syntax highlighting', value: 'syntax-highlighting' },
      { name: 'Git integration', value: 'git' },
      { name: 'History substring search', value: 'history-substring-search' }
    ];
  }

  getAvailableAliases() {
    return [
      { name: 'e = micro (editor)', value: 'micro' },
      { name: 'bat = batcat (on Ubuntu)', value: 'bat' },
      { name: 'll = ls -la', value: 'll' },
      { name: '.. = cd ..', value: 'cd' },
      { name: 'g = git', value: 'git' },
      { name: 'd = docker', value: 'docker' }
    ];
  }
} 